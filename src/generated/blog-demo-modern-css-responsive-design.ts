// Generated from src\content\blog\demo-modern-css-responsive-design.mdx
export const frontmatter = {
  "title": "Building Responsive Web Applications with Modern CSS",
  "date": "2024-08-30",
  "description": "Learn how to create truly responsive web applications using modern CSS features like Grid, Flexbox, and Container Queries.",
  "tags": [
    "web development",
    "css",
    "responsive design",
    "frontend"
  ],
  "featured": false
};
export const content = "\r\n# Building Responsive Web Applications with Modern CSS\r\n\r\nResponsive design has evolved far beyond simple media queries. Modern CSS offers powerful tools that make creating adaptive layouts easier and more maintainable than ever.\r\n\r\n## The Foundation: Mobile-First Approach\r\n\r\nStart with mobile layouts and progressively enhance for larger screens:\r\n\r\n```css\r\n/* Mobile-first base styles */\r\n.container {\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n/* Tablet and up */\r\n@media (min-width: 768px) {\r\n  .container {\r\n    padding: 2rem;\r\n    flex-direction: row;\r\n  }\r\n}\r\n\r\n/* Desktop */\r\n@media (min-width: 1024px) {\r\n  .container {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n  }\r\n}\r\n```\r\n\r\n## CSS Grid: The Layout Powerhouse\r\n\r\nGrid makes complex layouts simple:\r\n\r\n```css\r\n.gallery {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n```\r\n\r\nThis single rule creates a responsive gallery that:\r\n- Automatically adjusts column count\r\n- Maintains minimum item width\r\n- Distributes space evenly\r\n\r\n## Flexbox: For Component Layouts\r\n\r\nPerfect for navigation, cards, and smaller components:\r\n\r\n```css\r\n.nav {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.nav-links {\r\n  display: flex;\r\n  gap: 2rem;\r\n}\r\n\r\n/* Mobile: Stack navigation */\r\n@media (max-width: 768px) {\r\n  .nav {\r\n    flex-direction: column;\r\n  }\r\n}\r\n```\r\n\r\n## Container Queries: The Future is Here\r\n\r\nComponent-based responsive design:\r\n\r\n```css\r\n.card-container {\r\n  container-type: inline-size;\r\n}\r\n\r\n.card {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n}\r\n\r\n/* Adjust based on container width, not viewport */\r\n@container (min-width: 400px) {\r\n  .card {\r\n    grid-template-columns: 150px 1fr;\r\n  }\r\n}\r\n```\r\n\r\n## CSS Custom Properties for Theming\r\n\r\nCreate dynamic, responsive designs:\r\n\r\n```css\r\n:root {\r\n  --spacing-unit: 0.5rem;\r\n  --breakpoint-mobile: 480px;\r\n  --breakpoint-tablet: 768px;\r\n  --breakpoint-desktop: 1024px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  :root {\r\n    --spacing-unit: 1rem;\r\n  }\r\n}\r\n\r\n.section {\r\n  padding: calc(var(--spacing-unit) * 2);\r\n  gap: var(--spacing-unit);\r\n}\r\n```\r\n\r\n## Practical Tips\r\n\r\n### 1. Use Relative Units\r\n- `rem` for typography and spacing\r\n- `em` for component-specific scaling\r\n- `%` for fluid layouts\r\n- `vw/vh` sparingly for full-screen sections\r\n\r\n### 2. Optimize Images\r\n```css\r\nimg {\r\n  max-width: 100%;\r\n  height: auto;\r\n  display: block;\r\n}\r\n```\r\n\r\n### 3. Accessible Touch Targets\r\n```css\r\nbutton, a {\r\n  min-height: 44px;\r\n  min-width: 44px;\r\n  padding: 0.75rem 1.5rem;\r\n}\r\n```\r\n\r\n## Real-World Example\r\n\r\nHere's how I structured my portfolio site:\r\n\r\n```css\r\n.layout {\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"header\"\r\n    \"main\"\r\n    \"sidebar\"\r\n    \"footer\";\r\n  gap: 2rem;\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  .layout {\r\n    grid-template-areas:\r\n      \"header header\"\r\n      \"main sidebar\"\r\n      \"footer footer\";\r\n    grid-template-columns: 2fr 1fr;\r\n  }\r\n}\r\n```\r\n\r\n## Testing Responsive Designs\r\n\r\nDon't just resize your browser:\r\n1. Test on real devices\r\n2. Use browser DevTools device mode\r\n3. Check both orientations\r\n4. Test with different font sizes\r\n5. Verify touch interactions\r\n\r\n## Conclusion\r\n\r\nModern CSS has made responsive design more powerful and maintainable. By combining Grid, Flexbox, Container Queries, and Custom Properties, you can create layouts that adapt seamlessly to any screen size.\r\n\r\nThe key is to think in components rather than pages, and let CSS do the heavy lifting.\r\n\r\nHappy styling! ðŸŽ¨\r\n";
export const html = "<h1>Building Responsive Web Applications with Modern CSS</h1>\n<p>Responsive design has evolved far beyond simple media queries. Modern CSS offers powerful tools that make creating adaptive layouts easier and more maintainable than ever.</p>\n<h2>The Foundation: Mobile-First Approach</h2>\n<p>Start with mobile layouts and progressively enhance for larger screens:</p>\n<pre><code class=\"language-css\">/* Mobile-first base styles */\r\n.container {\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n/* Tablet and up */\r\n@media (min-width: 768px) {\r\n  .container {\r\n    padding: 2rem;\r\n    flex-direction: row;\r\n  }\r\n}\r\n\r\n/* Desktop */\r\n@media (min-width: 1024px) {\r\n  .container {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n  }\r\n}\n</code></pre>\n<h2>CSS Grid: The Layout Powerhouse</h2>\n<p>Grid makes complex layouts simple:</p>\n<pre><code class=\"language-css\">.gallery {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 1.5rem;\r\n}\n</code></pre>\n<p>This single rule creates a responsive gallery that:</p>\n<ul>\n<li>Automatically adjusts column count</li>\n<li>Maintains minimum item width</li>\n<li>Distributes space evenly</li>\n</ul>\n<h2>Flexbox: For Component Layouts</h2>\n<p>Perfect for navigation, cards, and smaller components:</p>\n<pre><code class=\"language-css\">.nav {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.nav-links {\r\n  display: flex;\r\n  gap: 2rem;\r\n}\r\n\r\n/* Mobile: Stack navigation */\r\n@media (max-width: 768px) {\r\n  .nav {\r\n    flex-direction: column;\r\n  }\r\n}\n</code></pre>\n<h2>Container Queries: The Future is Here</h2>\n<p>Component-based responsive design:</p>\n<pre><code class=\"language-css\">.card-container {\r\n  container-type: inline-size;\r\n}\r\n\r\n.card {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n}\r\n\r\n/* Adjust based on container width, not viewport */\r\n@container (min-width: 400px) {\r\n  .card {\r\n    grid-template-columns: 150px 1fr;\r\n  }\r\n}\n</code></pre>\n<h2>CSS Custom Properties for Theming</h2>\n<p>Create dynamic, responsive designs:</p>\n<pre><code class=\"language-css\">:root {\r\n  --spacing-unit: 0.5rem;\r\n  --breakpoint-mobile: 480px;\r\n  --breakpoint-tablet: 768px;\r\n  --breakpoint-desktop: 1024px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  :root {\r\n    --spacing-unit: 1rem;\r\n  }\r\n}\r\n\r\n.section {\r\n  padding: calc(var(--spacing-unit) * 2);\r\n  gap: var(--spacing-unit);\r\n}\n</code></pre>\n<h2>Practical Tips</h2>\n<h3>1. Use Relative Units</h3>\n<ul>\n<li><code>rem</code> for typography and spacing</li>\n<li><code>em</code> for component-specific scaling</li>\n<li><code>%</code> for fluid layouts</li>\n<li><code>vw/vh</code> sparingly for full-screen sections</li>\n</ul>\n<h3>2. Optimize Images</h3>\n<pre><code class=\"language-css\">img {\r\n  max-width: 100%;\r\n  height: auto;\r\n  display: block;\r\n}\n</code></pre>\n<h3>3. Accessible Touch Targets</h3>\n<pre><code class=\"language-css\">button, a {\r\n  min-height: 44px;\r\n  min-width: 44px;\r\n  padding: 0.75rem 1.5rem;\r\n}\n</code></pre>\n<h2>Real-World Example</h2>\n<p>Here's how I structured my portfolio site:</p>\n<pre><code class=\"language-css\">.layout {\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"header\"\r\n    \"main\"\r\n    \"sidebar\"\r\n    \"footer\";\r\n  gap: 2rem;\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  .layout {\r\n    grid-template-areas:\r\n      \"header header\"\r\n      \"main sidebar\"\r\n      \"footer footer\";\r\n    grid-template-columns: 2fr 1fr;\r\n  }\r\n}\n</code></pre>\n<h2>Testing Responsive Designs</h2>\n<p>Don't just resize your browser:</p>\n<ol>\n<li>Test on real devices</li>\n<li>Use browser DevTools device mode</li>\n<li>Check both orientations</li>\n<li>Test with different font sizes</li>\n<li>Verify touch interactions</li>\n</ol>\n<h2>Conclusion</h2>\n<p>Modern CSS has made responsive design more powerful and maintainable. By combining Grid, Flexbox, Container Queries, and Custom Properties, you can create layouts that adapt seamlessly to any screen size.</p>\n<p>The key is to think in components rather than pages, and let CSS do the heavy lifting.</p>\n<p>Happy styling! ðŸŽ¨</p>";
export const slug = "demo-modern-css-responsive-design";
export const type = "blog";

export default {
  frontmatter,
  content,
  html,
  slug,
  type
};
